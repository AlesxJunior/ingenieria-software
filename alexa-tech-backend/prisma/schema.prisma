generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enum para el tipo de entidad comercial
enum TipoEntidad {
  Cliente
  Proveedor
  Ambos
}

model User {
  id          String    @id @default(cuid())
  email       String    @unique
  username    String    @unique
  password    String
  firstName   String
  lastName    String
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  lastAccess  DateTime?
  permissions String[]  @default([])

  // Relaciones
  auditLogs   AuditLog[]
  userActivities UserActivity[]
  productsCreated Product[] @relation("ProductCreatedBy")
  productsUpdated Product[] @relation("ProductUpdatedBy")
  clientsCreated  Client[]  @relation("ClientCreatedBy")
  clientsUpdated  Client[]  @relation("ClientUpdatedBy")
  purchaseOrders  Purchase[] @relation("PurchaseCreatedBy")
  inventoryMovements InventoryMovement[]

  @@map("users")
}

model AuditLog {
  id        String   @id @default(cuid())
  action    String   // LOGIN, CREATE_USER, UPDATE_USER, DELETE_USER, etc.
  userId    String?  // Usuario que realizó la acción
  targetId  String?  // ID del recurso afectado
  details   String?  // Detalles adicionales de la acción
  ipAddress String?  // Dirección IP del usuario
  userAgent String?  // User agent del navegador
  createdAt DateTime @default(now())

  // Relación con usuario
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("audit_logs")
}

model UserActivity {
  id        String   @id @default(cuid())
  userId    String   // Usuario que realizó la actividad
  action    String   // Tipo de actividad
  details   String?  // Detalles de la actividad
  ipAddress String?  // Dirección IP
  userAgent String?  // User agent del navegador
  createdAt DateTime @default(now())

  // Relación con usuario
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_activities")
}

model SystemEvent {
  id        String   @id @default(cuid())
  type      String   // SYSTEM_START, DATABASE_BACKUP, ERROR, etc.
  details   String?  // Detalles del evento
  metadata  Json?    // Metadatos adicionales en formato JSON
  createdAt DateTime @default(now())

  @@map("system_events")
}

model Departamento {
  id       String   @id
  nombre   String
  provincias Provincia[]
  clients    Client[]

  @@map("departments")
}

model Provincia {
  id              String   @id
  nombre          String
  departamentoId  String
  departamento    Departamento @relation(fields: [departamentoId], references: [id])
  distritos       Distrito[]
  clients         Client[]

  @@map("provinces")
}

model Distrito {
  id           String   @id
  nombre       String
  provinciaId  String
  provincia    Provincia @relation(fields: [provinciaId], references: [id])
  clients      Client[]

  @@map("districts")
}

model Client {
  id               String   @id @default(cuid())
  // Tipo de entidad comercial (Cliente, Proveedor o Ambos)
  tipoEntidad      TipoEntidad @default(Cliente)
  tipoDocumento    String   // DNI, RUC, CE, Pasaporte
  numeroDocumento  String   @unique // Número de documento único
  
  // Campos para DNI y CE (Personas Naturales)
  nombres          String?  // Nombres (solo para DNI/CE/Pasaporte)
  apellidos        String?  // Apellidos (solo para DNI/CE/Pasaporte)
  
  // Campos para RUC (Personas Jurídicas)
  razonSocial      String?  // Razón Social (solo para RUC)
  
  // Campos comunes
  email            String   @unique // Email único del cliente
  telefono         String   // Teléfono de contacto
  direccion        String   // Dirección

  // Ubicación (Perú)
  departamentoId   String
  provinciaId      String
  distritoId       String
  departamento     Departamento @relation(fields: [departamentoId], references: [id])
  provincia        Provincia    @relation(fields: [provinciaId], references: [id])
  distrito         Distrito     @relation(fields: [distritoId], references: [id])
  
  // Auditoría de creación/actualización
  usuarioCreacion      String?
  usuarioActualizacion String?
  createdBy            User?    @relation("ClientCreatedBy", fields: [usuarioCreacion], references: [id], onDelete: SetNull)
  updatedBy            User?    @relation("ClientUpdatedBy", fields: [usuarioActualizacion], references: [id], onDelete: SetNull)

  isActive         Boolean  @default(true) // Soft delete
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  @@map("commercial_entities")
}

model Product {
  id                 String   @id @default(cuid())
  codigo             String   @unique
  nombre             String
  descripcion        String?
  categoria          String
  precioVenta        Decimal
  stock              Int      @default(0)
  minStock           Int?
  trackInventory     Boolean  @default(true)
  estado             Boolean  @default(true) // Activo/Inactivo (soft delete)
  unidadMedida       String

  // Auditoría de creación/actualización
  usuarioCreacion      String?
  usuarioActualizacion String?
  createdBy            User?    @relation("ProductCreatedBy", fields: [usuarioCreacion], references: [id], onDelete: SetNull)
  updatedBy            User?    @relation("ProductUpdatedBy", fields: [usuarioActualizacion], references: [id], onDelete: SetNull)

  // Relación con items de compra
  purchaseItems       PurchaseItem[] @relation("PurchaseItemProduct")

  // Relaciones de inventario
  stockByWarehouses   StockByWarehouse[]
  inventoryMovements  InventoryMovement[]

  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("products")
}

// Enum para estado de compra
enum PurchaseStatus {
  Pendiente
  Recibida
  Cancelada
}

// Enum para tipo de comprobante
enum VoucherType {
  Factura
  Boleta
  GuiaRemision
}

// Enum para forma de pago
enum PaymentMethod {
  Efectivo
  Credito_30
  Credito_60
}

model Purchase {
  id                  String          @id @default(cuid())
  codigoOrden         String          @unique
  proveedorId         String
  almacenId           String
  fechaEmision        DateTime
  fechaEntregaEstimada DateTime?
  tipoComprobante     VoucherType?
  formaPago           PaymentMethod?
  subtotal            Decimal         @default(0)
  descuento           Decimal         @default(0)
  total               Decimal         @default(0)
  estado              PurchaseStatus  @default(Pendiente)
  observaciones       String?

  usuarioId           String?
  usuario             User?           @relation("PurchaseCreatedBy", fields: [usuarioId], references: [id], onDelete: SetNull)

  items               PurchaseItem[]

  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  @@map("purchase_orders")
}

model PurchaseItem {
  id             String   @id @default(cuid())
  purchaseId     String
  purchase       Purchase @relation(fields: [purchaseId], references: [id], onDelete: Cascade)

  productCodigo  String
  product        Product  @relation("PurchaseItemProduct", fields: [productCodigo], references: [codigo], onDelete: SetNull)

  nombreProducto String?
  cantidad       Int
  precioUnitario Decimal
  subtotal       Decimal

  @@map("purchase_items")
}

// Inventario: enums
enum MovementType {
  ENTRADA
  SALIDA
  AJUSTE
}

enum AdjustmentDirection {
  INCREMENT
  DECREMENT
}

enum AdjustmentReason {
  MermaDanio
  MermaRotura
  DevolucionCliente
  ErrorConteo
  OtroRazon
}

model Warehouse {
  id         String   @id @default(cuid())
  codigo     String   @unique
  nombre     String
  ubicacion  String?
  capacidad  Int?
  activo     Boolean  @default(true) @map("isActive")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relaciones de inventario
  stockByWarehouses   StockByWarehouse[]
  inventoryMovements  InventoryMovement[]

  @@map("warehouses")
}

model StockByWarehouse {
  id           String   @id @default(cuid())
  productId    String
  warehouseId  String
  quantity     Int      @default(0) @map("cantidad")
  minStock     Int?                     @map("stockMinimo")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  product      Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  warehouse    Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)

  @@unique([productId, warehouseId])
  @@map("stock_by_warehouse")
}

model InventoryMovement {
  id            String   @id @default(cuid())
  productId     String
  warehouseId   String
  type          String   @map("tipo")
  quantity      Int      @map("cantidad")
  stockBefore   Int      @map("stockAntes")
  stockAfter    Int      @map("stockDespues")
  reason        String   @map("motivo")
  documentRef   String?  @map("documentoReferencia")
  userId        String?  @map("usuarioId")
  createdAt     DateTime @default(now())

  product       Product   @relation(fields: [productId], references: [id], onDelete: Cascade)
  warehouse     Warehouse @relation(fields: [warehouseId], references: [id], onDelete: Cascade)
  user          User?     @relation(fields: [userId], references: [id], onDelete: SetNull)

  @@map("inventory_movements")
}
