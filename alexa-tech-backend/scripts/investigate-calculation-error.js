const { PrismaClient } = require('@prisma/client');

const prisma = new PrismaClient();

async function investigateCalculationError() {
  console.log('üîç Investigando error de c√°lculo en movimiento de ajuste...\n');

  try {
    // Buscar el movimiento problem√°tico
    const problematicMovement = await prisma.inventoryMovement.findUnique({
      where: {
        id: 'cmh2f13a80020o1lsb0rewuto'
      },
      include: {
        product: true,
        warehouse: true,
        user: true
      }
    });

    if (!problematicMovement) {
      console.log('‚ùå No se encontr√≥ el movimiento problem√°tico');
      return;
    }

    console.log('üìã Detalles del movimiento problem√°tico:');
    console.log(`   ID: ${problematicMovement.id}`);
    console.log(`   Producto: ${problematicMovement.product.name} (${problematicMovement.product.code})`);
    console.log(`   Almac√©n: ${problematicMovement.warehouse.name}`);
    console.log(`   Tipo: ${problematicMovement.type}`);
    console.log(`   Cantidad: ${problematicMovement.quantity}`);
    console.log(`   Stock antes: ${problematicMovement.stockBefore}`);
    console.log(`   Stock despu√©s: ${problematicMovement.stockAfter}`);
    console.log(`   Motivo: ${problematicMovement.reason}`);
    console.log(`   Documento: ${problematicMovement.documentRef || 'N/A'}`);
    console.log(`   Usuario: ${problematicMovement.user?.name || 'N/A'}`);
    console.log(`   Fecha: ${problematicMovement.createdAt}`);

    // Analizar el problema
    console.log('\nüîç An√°lisis del problema:');
    
    // Para ajustes, necesitamos entender la l√≥gica correcta
    console.log('   üìä C√°lculo esperado para AJUSTE:');
    console.log(`      Stock antes: ${problematicMovement.stockBefore}`);
    console.log(`      Cantidad del ajuste: ${problematicMovement.quantity}`);
    
    // Verificar si es un ajuste positivo o negativo
    if (problematicMovement.quantity > 0) {
      console.log('      Tipo de ajuste: POSITIVO (incremento)');
      console.log(`      Stock despu√©s esperado: ${problematicMovement.stockBefore} + ${problematicMovement.quantity} = ${problematicMovement.stockBefore + problematicMovement.quantity}`);
    } else {
      console.log('      Tipo de ajuste: NEGATIVO (decremento)');
      console.log(`      Stock despu√©s esperado: ${problematicMovement.stockBefore} + (${problematicMovement.quantity}) = ${problematicMovement.stockBefore + problematicMovement.quantity}`);
    }
    
    console.log(`      Stock despu√©s real: ${problematicMovement.stockAfter}`);

    // Verificar si hay otros movimientos para este producto/almac√©n
    console.log('\nüìà Historial completo de movimientos para este producto/almac√©n:');
    
    const allMovements = await prisma.inventoryMovement.findMany({
      where: {
        productId: problematicMovement.productId,
        warehouseId: problematicMovement.warehouseId
      },
      orderBy: {
        createdAt: 'asc'
      },
      include: {
        user: true
      }
    });

    for (let i = 0; i < allMovements.length; i++) {
      const movement = allMovements[i];
      const isProblematic = movement.id === problematicMovement.id;
      const marker = isProblematic ? '‚ùå' : '‚úÖ';
      
      console.log(`   ${marker} ${i + 1}. ${movement.type} - Cantidad: ${movement.quantity}`);
      console.log(`      Stock: ${movement.stockBefore} ‚Üí ${movement.stockAfter}`);
      console.log(`      Fecha: ${movement.createdAt.toISOString()}`);
      console.log(`      Motivo: ${movement.reason}`);
      
      if (isProblematic) {
        console.log('      ‚ö†Ô∏è  ESTE ES EL MOVIMIENTO PROBLEM√ÅTICO');
      }
      console.log('');
    }

    // Verificar el stock actual
    console.log('üìä Stock actual en la base de datos:');
    
    const currentStock = await prisma.stockByWarehouse.findFirst({
      where: {
        productId: problematicMovement.productId,
        warehouseId: problematicMovement.warehouseId
      }
    });

    if (currentStock) {
      console.log(`   Stock actual: ${currentStock.quantity}`);
      console.log(`   √öltima actualizaci√≥n: ${currentStock.updatedAt}`);
      
      // Verificar si el stock actual coincide con el √∫ltimo movimiento
      const lastMovement = allMovements[allMovements.length - 1];
      if (currentStock.quantity === lastMovement.stockAfter) {
        console.log('   ‚úÖ Stock actual coincide con √∫ltimo movimiento');
      } else {
        console.log('   ‚ùå Stock actual NO coincide con √∫ltimo movimiento');
        console.log(`      Stock seg√∫n √∫ltimo movimiento: ${lastMovement.stockAfter}`);
        console.log(`      Stock actual en tabla: ${currentStock.quantity}`);
      }
    } else {
      console.log('   ‚ùå No se encontr√≥ registro de stock para este producto/almac√©n');
    }

    // Sugerir correcci√≥n
    console.log('\nüí° Sugerencias de correcci√≥n:');
    
    if (problematicMovement.type === 'AJUSTE') {
      console.log('   1. Para movimientos de AJUSTE, verificar la l√≥gica de c√°lculo:');
      console.log('      - Si quantity es positivo: stockAfter = stockBefore + quantity');
      console.log('      - Si quantity es negativo: stockAfter = stockBefore + quantity');
      console.log('      - O si quantity representa el nuevo stock total: stockAfter = quantity');
      
      console.log('\n   2. Verificar en el c√≥digo del servicio de inventario:');
      console.log('      - ¬øC√≥mo se calcula stockAfter para ajustes?');
      console.log('      - ¬øSe est√° interpretando correctamente el tipo de ajuste?');
      
      console.log('\n   3. Posibles causas del error:');
      console.log('      - L√≥gica incorrecta en el c√°lculo de ajustes');
      console.log('      - Confusi√≥n entre cantidad de ajuste vs stock final');
      console.log('      - Error en la actualizaci√≥n del registro');
    }

  } catch (error) {
    console.error('‚ùå Error durante la investigaci√≥n:', error);
  } finally {
    await prisma.$disconnect();
  }
}

investigateCalculationError();